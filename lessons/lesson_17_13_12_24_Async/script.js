//синхронные методы, для действий, которые могут выполняться одновременно. И асинхронные действия: например при регистрации пользователя где-либо, для того чтобы успеть получить ответ от сервера, всё ли пользователь ввел верно при регистрации, через заданное время произойдет следующее действие, а за этот промежуток будет получен ответ от сервера

//!переменные создаются с помощью: let - блочная переменная, видна только в конкретном блоке либо ее нужно объявлять бо блоков (до вложенности)! ({} - блок!) ; const - блочная переменная, видна только в конкретном блоке!, var (deprecated - устаревшее, не используют)

//! синхронные действия - когда нет задержки во времени
//! Асинхронные действия - когда есть задержка во времени

console.log('Start')

//!function - regular (именная - многоразовая функция, т.к. можно несколько раз обратиться по имени или безымянная - одноразовая функция, можно обратиться только там где стоит ()). Можно вызвать ДО или ПОСЛЕ определения значения функции. Можно работать с регулярной функцией this, у которого выполняется действие
setTimeout(function () {//встроенный параметр функции
    console.log(5) // выводим цифру 5...
}, 0);//...без задержки

console.log('Finish')

function giveFiveAfterSevenSeconds (){
    setTimeout(function(){
        return 5
    }, 3000) //...с задержкой в 3 сек *3000 мл.сек
}

let res = giveFiveAfterSevenSeconds();
console.log(res)

const promise = new Promise (function (resolve, reject){//promise - обертка для синхронного действия, которая в качестве параметров (resolve, reject) принимает след параметры встроенные в promise
    //!Arrow function - стрелочная функция, описывающая какое-либо действие, обладает более коротким синтаксисом, чем обычная функция, т.е. она более удобная. Можем вызывать только после определения значения функции. this - НЕ работает в стрелочной функции
    setTimeout(() => resolve (5), 7000) //() - откуда берет и => что функция возвращает
})

promise
    .then((value) => console.log(value))
    .catch((err) => console.log(err))
    .finally(() => console.log('End'))
